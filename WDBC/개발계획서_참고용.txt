□ 개발 개요

○ 요약 설명

선택 주제: 차량 내부 및 외부 정보를 활용한 사용자 체감 솔루션 개발

팀 명: WakeMate

작품명: HyBud
작품설명 (3줄 요약)

ChatGPT API를 활용한 대화형 졸음운전 예방 시스템

파이카메라, CO2 센서, 웨어러블 디바이스, BLE 통신 등 다중 센서 기반 실시간 졸음 감지

졸음 의심 시 ChatGPT가 운전자에게 음성으로 대화를 시도하며 각성 유도

○ 개발 목적 및 목표

장시간 운전 중 졸음으로 인한 사고 위험을 능동적으로 방지할 수 있는 임베디드 기반 시스템 개발

사용자 맞춤형 대화를 통해 졸음 유도 상황을 사전에 차단하는 인터랙티브 시스템 구축

○ 개발 배경 및 동기

졸음운전은 교통사고의 주요 원인 중 하나이며, 특히 장거리 운전자나 야간 운행 시 위험성이 증가

기존 졸음감지 시스템은 단일 센서(예: 눈 깜빡임) 기반으로 오탐 가능성이 있음

다양한 생체 및 환경 정보를 융합하여 더 정확한 졸음 판단을 가능하게 하고, 운전자와 실시간 소통함으로써 새로운 사용자 체감 솔루션을 제안하고자 함

○ 작품 상세 설명

Raspberry Pi 5를 중심으로 카메라 영상, CO2 수치, 웨어러블 데이터를 통합하여 졸음 상태를 판단

졸음 판단 요소: ① 눈 감김 지속 시간 및 빈도 ② CO2 농도 (2000ppm 이상 시 졸음 유도 판단) ③ 수면 시간 및 심박수 (웨어러블 + BLE)

졸음 감지 시 마이크 및 스피커를 통해 ChatGPT API 기반 음성 대화 시도 (TTS/STT 포함)

센서들은 CAN 통신으로 제어되어 확장성과 통신 안정성을 확보함

□ 개발 방향 및 전략

○ 개발 방향

센서 기반 신호를 융합하여 졸음 판단 정확도 향상

운전자와의 대화를 통해 능동적으로 각성 유도 및 졸음 예방

○ 개발 방법 및 활용 기술

SW분야
· OpenCV 기반 얼굴 및 눈 인식, Dlib or YOLO 기반 눈 감김 분석
· ChatGPT API 연동을 위한 Python 기반 음성 처리 (Google STT, TTS 또는 EdgeTTS)
· BLE 통신을 통한 웨어러블 디바이스 연동 및 실시간 데이터 수집
· CAN 통신 라이브러리 (python-can 등)를 활용한 센서 제어 통합

HW분야
· Raspberry Pi 5 + Hailo-8L: 영상처리 및 AI 추론 가속
· Pi Camera V3 or V3 Wide (IR 필터 유무 선택)
· MH-Z19B CO2 센서
· Galaxy Watch + Wear OS + Health Services API
· USB 또는 I2S 기반 마이크 및 스피커
· MCP2515 기반 CAN 모듈 (추가 RPi 또는 MCU 포함)

○ 유사 작품과의 비교 분석 및 차별성

기존 졸음 방지 장치는 단순 알람 또는 카메라 기반 감지에 한정됨

본 작품은 환경 정보, 생체 데이터, 안면 인식 정보를 모두 융합하고, ChatGPT를 통해 사용자 맞춤형 대화로 각성을 유도하는 점에서 차별화됨

○ 예상되는 장애요인 및 해결방안

ChatGPT API 지연 문제 → Hailo 기반 on-device inference fallback 구조 실험 (향후 계획)

BLE 통신 지연 → 실시간성 확보를 위한 송수신 버퍼 및 패킷 순서 동기화 로직 적용

센서 오작동 시 판단 오류 → 다중 정보 기반 신뢰도 점수로 보완 판단

○ 예상 결과 작품이 활용될 분야 및 방법 제시

장거리 운전자 대상 차량 안전 솔루션, 차량 내 HMI 인터페이스 고도화

웨어러블 기반 운전자 건강 모니터링과 연계된 미래형 운전 보조 시스템

□ 작품 상세 설명 및 지원 장비 사용 계획

○ 작품 작동 원리 설명

Raspberry Pi 5가 센서 및 카메라 초기화

실시간으로 얼굴 인식 및 눈 감김 추론 (Hailo-8L 가속)

CO2 수치 및 웨어러블 심박수/수면 정보 BLE 수신

졸음 여부 판단 → 판단 결과에 따라 ChatGPT API 호출

스피커로 질문, 마이크로 응답 수신하여 대화 지속

○ 작품에 사용될 SW와 HW 설명

SW 상세설명
· Python + OpenCV, TFLite, HailoRT API
· Google Speech-to-Text / Text-to-Speech API 또는 EdgeTTS 대체
· BLE 데이터 수집을 위한 Android 서비스 앱 + GATT 프로토콜
· CAN 메시지 송수신을 위한 python-can

HW 상세설명
· Raspberry Pi 5 + Hailo-8L M.2 HAT+
· Pi Camera V3 또는 V3 Wide + IR LED 보드 (야간 주행 지원)
· CO2 센서 (MH-Z19B), 마이크, 스피커
· Galaxy Watch 6 (웨어OS 기반), BLE 송신기
· CAN 모듈 (MCP2515) + 별도 MCU or 추가 Raspberry Pi

○ 기술 공부 내용 및 적용 방안

BLE 통신 스택 및 서비스 구성, Wear OS Health API 활용법

CAN 통신 프로토콜 및 python-can 라이브러리 응용

AI 음성 인터페이스 파이프라인 구성 (STT-TTS-GPT 연동)

□ 개발 일정

No

내용

7월

8월

9월

10월

1

기능 설계 및 분석

●●●

●●



2

기능 구현 및 개발



●●●

●●●

●

3

시험 평가 및 테스트





●●

●●●

□ 팀 구성 및 역량

No

구분

성명

팀 내 담당 업무

업무 관련 역량

1

팀장

○○○

시스템 통합, ChatGPT 연동

Python, REST API, RPi, BLE 개발 경험

2

팀원

○○○

영상처리 및 AI 추론

OpenCV, TFLite, Hailo-8L 경험

3

팀원

○○○

웨어러블 연동 및 BLE 앱 개발

Wear OS 개발, Kotlin/Java 기반 Android 개발

4

팀원

○○○

CAN 통신 구성 및 센서 제어

C/C++, python-can, RPi + MCP2515 경험

5

팀원

○○○

하드웨어 통합 및 테스트

GPIO, Serial, 센서 통합 경험
